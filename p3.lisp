(defun append-lists(list1 list2)
	(if (null list1)
		list2
		(cons (first list1)(append-lists(rest list1) list2))
		)
	)

(print "Append two lists using examples (A B C) and (1 2 3)")
(terpri)
(print(append-lists '(A B C) '(1 2 3)))
(terpri)
(print "Test it with your own lists")
(terpri)
(print "Input a list (i.e. (x x x))")
(terpri)
(setq list1 (read))
(terpri)
(print "Input another list (i.e. (x x x))")
(terpri)
(setq list2 (read))
(terpri)
(print (append-lists list1 list2))

(defun trust (e list)
  (if (null list) nil
    (if (eql e (first list)) t
    (trust e (rest list) )
		)
	)
)
(defun union (list1 list2)
  (cond ((null list1) list2)
    ((trust(car list1) list2) (union(cdr list1) list2))
    (t (cons (car list1) (union(cdr list1) list2)))
  )
)
(print "Union of (a b c) and (a c d)")
(print(union '(a b c) '(a c d)))
(print "Input a list for union")
(terpri)
(setq list1 (read))
(print "Input a second list for union")
(terpri)
(setq list2 (read))
(terpri)
(print (union list1 list2))
(terpri)

(defun intersect (list1 list2)
  (if (null list1) list1
    (if (trust (car list1) list2)
      (cons (car list1) (intersect (cdr list1) list2))
      (intersect (cdr list1) list2)
			)
	)
)

(print "Intersection of (a b c) and (a c d)")
(print(intersect '(a b c) '(a c d) ))
(print "Input a list to intersect(eg. (x x x) )")
(terpri)
(setq list1 (read))
(print "Input another list to intersect (eg. (x x x) )")
(terpri)
(setq list2 (read))
(print(intersect list1 list2))