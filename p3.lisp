(defun append-lists(list1 list2)
	(if (null list1)
		list2
		(cons (first list1)(append-lists(rest list1) list2))
		)
	)

(print "Append two lists using examples (A B C) and (1 2 3)")
(terpri)
(print(append-lists '(A B C) '(1 2 3)))
(terpri)
(print "Test it with your own lists")
(terpri)
(print "Input a list (i.e. (x x x))")
(terpri)
(setq list1 (read))
(terpri)
(print "Input another list (i.e. (x x x))")
(terpri)
(setq list2 (read))
(terpri)
(print (append-lists list1 list2))

(defun trust (e list)
  (if (null list) nil
    (if (eql e (first list)) t
    (trust e (rest list) )
		)
	)
)
(defun union (list1 list2)
  (cond ((null list1) list2)
    ((trust(car list1) list2) (union(cdr list1) list2))
    (t (cons (car list1) (union(cdr list1) list2)))
  )
)
(print "Union of (a b c) and (a c d)")
(print(union '(a b c) '(a c d)))
(print "Input a list for union")
(terpri)
(setq list1 (read))
(print "Input a second list for union")
(terpri)
(setq list2 (read))
(terpri)
(print (union list1 list2))
(terpri)

(defun intersect (list1 list2)
  (if (null list1) list1
    (if (trust (car list1) list2)
      (cons (car list1) (intersect (cdr list1) list2))
      (intersect (cdr list1) list2)
			)
	)
)

(print "Intersection of (a b c) and (a c d)")
(print(intersect '(a b c) '(a c d) ))
(print "Input a list to intersect(eg. (x x x) )")
(terpri)
(setq list1 (read))
(print "Input another list to intersect (eg. (x x x) )")
(terpri)
(setq list2 (read))
(print(intersect list1 list2))

(defun divisorSum (start curr sum integers)
  (if (< curr 1)  sum
  (if (contains (/ start curr) integers)
    (divisorSum start (- curr 1) (+ sum (/ start curr)) integers)
    (divisorSum start (- curr 1) sum integers)
  )
  )
)

(defun mod(init integers)
  (if(< init 2) integers
    (mod (- init 1) (cons init integers))
  )
)

(defun test (init)
  (print (divisorSum init (- init 1) 1 (mod (- init 1) '())))
)

(defun perfectNum (curr)
  (if (= curr (test curr)) t nil)
)
(defun abundantNum (curr)
  (if (< curr (test curr)) t nil)
)
(defun deficientNum (curr)
  (if (> curr (test curr)) t nil)
)

(print "perfectNum test")
(print "perfectNum of 5")
(print (perfectNum 5))
(print "perfectp of 6")
(print (perfectNum 6))
(print "input an integer to test perfectp")
(terpri)
(setq integer (read))
(terpri)
(print (perfectp integer))

(print "abundantNum test")
(print "abundant 5")
(print (abundantNum 5))
(print "abundant 12")
(print (abundantNum 12))
(print "input an integer to test abundantNum")
(terpri)
(setq integer (read))
(terpri)
(print (abundantNum integer))

(print "deficientNum test")
(print "deficient 5")
(print (deficientNum 5))
(print "deficient 12")
(print (deficientNum 12))
(print "input an integer to test deficientNum")
(terpri)
(setq integer (read))
(terpri)
(print (deficientNum integer))
